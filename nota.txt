# Creando un Componente
ng generate component contador
ng g c contador

ng g c components/title


# Creando Servicios
ng generate service message

# Creando un Modulo
ng g m appRouting
ng g m appRouting --flat
ng g m blog --routing

ng g c courses/ListCourses

Ciclo de vida de un Componente
------------------------------------------
1. Constructor
2. ngOnChanges
3. ngOnInit
4. ngDoCheck
5. ngAfterContentInit
6. ngAfterContentChecked
7. ngAfterViewInit
8. ngAfterViewChecked
9. ngOnDestroy


a. ngOnChanges() -> se ejecuta cuando hay cambio en el Input o Ouput
b. ngOnInit() -> Se invoca una sola vez
c. ngOnDestroy() => 


ng serve --port 3000

-----------------------------------------------------------------------------------------

Ciclo de vida de un Componente
---------------------------------------------------
A. Nace
    . Inicializar valores
    . Llamar endpoints
B. Cambia
    . Loginca de negocio
    . Modifica valores
    . Renderizar valores y sus cambios
C. Muere
    . Terminar cualquier conexion
    . Liberar memoria

Directivas
---------------------------------------------
Las directivas extienden funcionalidades del DOM
<div *ngIf="true">
    ¡Me ven!
</div>

tipos
--------
A. Estructuras => modifica el html
    * ngIf
    * ngFor
    * ngSwitch
B. Entrada = Property Binding
    typescript -> template
    [] <input [ngModel] = "prop" /> 
C. Evento
    template -> typescript
    () <button (ngClick)="metodo()" />
D. Dual binding
    [()] => se utiliza tanto para entrada como salida (Entrada y evento)

prop = true;

<div *ngIf="prop">
    ¡Me Ven!
</div>

items = [
    { name: "Kendra" },
    { name: "Meryem" },
];

<div *ngFor="let item of items">
    { item.name }
</div>

[ngStyle] = Aplica estilos de manera condicionals

<span [ngStyle] = "{
    background: valido ? 'green' : 'red'
}
>
    ¿De que color sere?
</span>

Para nombrar un elemento DOM => se realiza mediante un #name




Tasks
---------------------------------------
ciclo de vida
plantillas
servicios

Firebase Angular
--------------------------------
ng add @angular/fire


ng g component people-table --standalone (que no modifique ningo modulo)

ng generate service hero

npm install --save firebase --allow-dirty --force

npm install ngx-cookie-service

------------------------------------------
Los providers sirven para registrar los Guards, etc


Programacion Reactiva
--------------------------------------------------------
La programacion reactiva es programacion orientado al manejo de streams de datos
asincronos y la propagacion de los cambios.

Que es RxJs
---------------------------------------------------
Es una libreria  para componer programas asincronas y basados en eventos usando secuencias observables,
RxJs nos permite hacer programacion reactiva. No es una libreria especifica para angular,
Podemos usar esta libreria en otras tecnologias.

Stream de datos
--------------------------------
Son colecciones o secuencia de eventos continuos ordenados en el tiempo.

Quienes producen un Stream de datos
-----------------------------------------------
- Eventos de la ui => click, submit, etc
- Http Request
- Web Sockets
- Estado de una app

Los Stream de datos son:
---------------------------------------------------------
1. Observable
2. Observadores
3. Suscripciones

RxJs - JavaScript
------------------------------------------------------------
1. Observables -> es un stream de datos, un observable unicia cuando alguien se suscribe,
2. Operators
3. Subscription
4. Subjects

Subject
-------------------------------------------------
Subject tiene el mismo comportamiento que un Observable, pero este puede compartir data con varios
Observadores u Observers. Puede ser un Observable y un Observador

1. Subject
2. Behavior Subject
3. Replay Subject
4. Async Subject

Promise VS Observable
----------------------------------------------------
1. Se ejecuta inmediatamente            1. No comienza hasta la suscripcion
2. Emite un solo valor                  2. Emite multiples valores a lo largo del tiempo.
3. Envia los errores a a promesa hija   3. Los observable proporciona operadores (map, son como 300 oper)
4. Usa clausa .then()                   4. es importante desuscripciones

--> Observables donde no es necesario desuscribirte, http. Api, en las observables de las rutas.


Actualizando Angular
----------------------------------------------------
npm install -g @angular/cli
